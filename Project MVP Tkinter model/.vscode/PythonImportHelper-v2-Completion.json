[
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "yaml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "yaml",
        "description": "yaml",
        "detail": "yaml",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "SimpleSQLiteModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Presenter",
        "importPath": "presenter",
        "description": "presenter",
        "isExtraImport": true,
        "detail": "presenter",
        "documentation": {}
    },
    {
        "label": "Gui",
        "importPath": "view",
        "description": "view",
        "isExtraImport": true,
        "detail": "view",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractclassmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "tkinter.ttk",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.ttk",
        "description": "tkinter.ttk",
        "detail": "tkinter.ttk",
        "documentation": {}
    },
    {
        "label": "ThemedTk",
        "importPath": "ttkthemes",
        "description": "ttkthemes",
        "isExtraImport": true,
        "detail": "ttkthemes",
        "documentation": {}
    },
    {
        "label": "TkFactory",
        "importPath": "tkfactory",
        "description": "tkfactory",
        "isExtraImport": true,
        "detail": "tkfactory",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    __config_file: str = \"config.yml\"\n    config_parameters: dict = field(default_factory=dict)\n    def __post_init__(self) -> None:\n        with open(self.config_file, \"r\") as config_file:\n            self.config_parameters = yaml.safe_load(config_file)\n    def get_parameter(self, parameter_name: str = None) -> str | int:\n        if parameter_name in self.config_parameters:\n            return self.config_parameters[parameter_name]\n        else:",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main() -> None:\n    configuration_file = \"config.yml\"\n    conf = Config(configuration_file)\n    model = SimpleSQLiteModel()\n    view = Gui(conf)\n    presenter = Presenter(model, view)\n    presenter.run()\nif __name__ == \"__main__\":\n    main()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class Model(ABC):\n    @abstractclassmethod\n    def add(self) -> None:\n        pass\n    @abstractclassmethod\n    def get(self) -> None:\n        pass\n    @abstractclassmethod\n    def update(self) -> None:\n        pass",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SQLiteModel",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class SQLiteModel:\n    db_file: str = None\n    @contextmanager\n    def open_db(self):\n        connection = sqlite3.connect(self.db_file)\n        cursor = connection.cursor()\n        try:\n            yield cursor\n        except sqlite3.DatabaseError as error:\n            print(error)",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SimpleSQLiteModel",
        "kind": 6,
        "importPath": "models",
        "description": "models",
        "peekOfCode": "class SimpleSQLiteModel(Model, SQLiteModel):\n    def __post_init__(self) -> None:\n        super().__init__()\n    def add(self) -> None:\n        pass\n    def get(self):\n        with self.open_db() as cursor:\n            cursor.execute(\"SELECT * FROM table\")\n            results = cursor.fetchall()\n    def update(self) -> None:",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "View",
        "kind": 6,
        "importPath": "presenter",
        "description": "presenter",
        "peekOfCode": "class View(Protocol):\n    def init_ui(self, presenter: Presenter) -> None:\n        ...\n    def add(self) -> None:\n        ...\n    def get(self) -> None:\n        ...\n    def update(self) -> None:\n        ...\n    def delete(self) -> None:",
        "detail": "presenter",
        "documentation": {}
    },
    {
        "label": "Presenter",
        "kind": 6,
        "importPath": "presenter",
        "description": "presenter",
        "peekOfCode": "class Presenter:\n    model: Model\n    view: View\n    def __post_init__(self) -> None:\n        pass\n    # ACTIONS\n    def handle_add(self, event: Callable[[tk.Event], None]) -> None:\n        pass\n    def handle_get(self, event: Callable[[tk.Event], None]) -> None:\n        pass",
        "detail": "presenter",
        "documentation": {}
    },
    {
        "label": "TkFactory",
        "kind": 6,
        "importPath": "tkfactory",
        "description": "tkfactory",
        "peekOfCode": "class TkFactory(ttk.Frame):\n    master: tk.Wm | ttk.Frame\n    frame: ttk.Frame = None\n    def __post_init__(self) -> None:\n        super().__init__()\n        self.frame = self.create_frame()\n    def create_frame(self):\n        self.frame = ttk.Frame(self.master, padding=(5, 10, 5, 10))\n        self.treeview = ttk.Treeview(self.frame, selectmode=\"browse\")\n        self.xscroll = ttk.Scrollbar(",
        "detail": "tkfactory",
        "documentation": {}
    },
    {
        "label": "Presenter",
        "kind": 6,
        "importPath": "view",
        "description": "view",
        "peekOfCode": "class Presenter(Protocol):\n    def handle_add(self, event: Callable[[tk.Event], None]) -> None:\n        ...\n    def handle_get(self, event: Callable[[tk.Event], None]) -> None:\n        ...\n    def handle_update(self, event: Callable[[tk.Event], None]) -> None:\n        ...\n    def handle_delete(self, event: Callable[[tk.Event], None]) -> None:\n        ...\n@dataclass",
        "detail": "view",
        "documentation": {}
    },
    {
        "label": "Gui",
        "kind": 6,
        "importPath": "view",
        "description": "view",
        "peekOfCode": "class Gui(ThemedTk):\n    conf: Config\n    def __post_init__(self) -> None:\n        super().__init__()\n        # Window configuration\n        self.title(self.conf.get_parameter(\"app_title\"))\n        self.iconbitmap(self.conf.get_parameter(\"app_icon_file\"))\n        self.resizable(\n            self.conf.get_parameter(\"app_window_resizable_width\"),\n            self.conf.get_parameter(\"app_window_resizable_height\"),",
        "detail": "view",
        "documentation": {}
    },
    {
        "label": "ScrollableTreeFactory",
        "kind": 6,
        "importPath": "view",
        "description": "view",
        "peekOfCode": "class ScrollableTreeFactory:\n    root: ThemedTk\n    frame: ttk.Frame = None\n    def __post_init__(self) -> None:\n        self.frame = self.create_frame()\n    def create_frame(self):\n        frame = ttk.Frame(self.root)\n        tree = ttk.Treeview(frame)\n        tree.grid(row=0, column=0)\n        return frame",
        "detail": "view",
        "documentation": {}
    }
]